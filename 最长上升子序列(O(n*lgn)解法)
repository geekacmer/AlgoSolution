//O(n*lgn)
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<ctime>
#include<algorithm>
using namespace std;
const int INF=1e9;
const int MAXN=40010;
int d[MAXN],a[MAXN];
int main()
{
  int ans,i,j,va,T,n;
  scanf("%d",&T);
  while(T--)
  {
    scanf("%d",&n);
    ans=0;
    d[0]=-INF;
    for(i=1;i<=n;++i)
    {
      scanf("%d",&a[i]);
      if(d[ans]<a[i])
      {
       d[++ans]=a[i];
      }
      else
      {
        j=lower_bound(d+1,d+ans,a[i])-d-1;//STL查找一个数列中小于a[i]的最后一个数
                                         //这里用到了单调性d[1]<d[2]<d[3]....
        d[j+1]=a[i];
      }
    }
    printf("%d\n",ans);
  }
  return 0;
}

Extern:
ASK:{给1~N的两个排列P1,P2，求他们的最大公共子序列}

最简单的方法就是用O(N^2)的LCS，这里可以换种思路，达到O(n*lgn).
将P1与P2进行同样的置换不影响LCS.
For instance:
P1:1 5 3 2 4 
P2:5 3 4 2 1 
通过对P1进行：5->2,2->4,4->5,P1变成：1,2,3,4,5
那对P2进行同样的置换：P2变成：2,3,5,4,1
那么问题就变为求置换后的P2的最大上升子序列.
